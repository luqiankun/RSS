{
  "openapi": "3.1.0",
  "info": {
    "title": "tcs",
    "description": "",
    "version": "1.0.0"
  },
  "tags": [
    {
      "name": "宠物"
    },
    {
      "name": "Transport orders"
    },
    {
      "name": "Vehicles"
    },
    {
      "name": "Peripheral jobs"
    },
    {
      "name": "Plant models"
    },
    {
      "name": "Peripherals"
    },
    {
      "name": "Order Sequences"
    },
    {
      "name": "Status"
    }
  ],
  "paths": {
    "/pet/{petId}": {
      "get": {
        "summary": "查询宠物详情",
        "deprecated": false,
        "description": "",
        "tags": [
          "宠物"
        ],
        "parameters": [
          {
            "name": "petId",
            "in": "path",
            "description": "宠物 ID",
            "required": true,
            "example": "1",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "成功",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "integer",
                      "minimum": 0,
                      "maximum": 0,
                      "description": "状态码"
                    },
                    "data": {
                      "$ref": "#/components/schemas/Pet",
                      "description": "宠物信息"
                    }
                  },
                  "required": [
                    "code",
                    "data"
                  ]
                },
                "examples": {
                  "1": {
                    "summary": "成功示例",
                    "value": {
                      "code": 0,
                      "data": {
                        "name": "Hello Kity",
                        "photoUrls": [
                          "http://dummyimage.com/400x400"
                        ],
                        "id": 3,
                        "category": {
                          "id": 71,
                          "name": "Cat"
                        },
                        "tags": [
                          {
                            "id": 22,
                            "name": "Cat"
                          }
                        ],
                        "status": "sold"
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "参数不正确",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "integer"
                    },
                    "message": {
                      "type": "string"
                    }
                  },
                  "required": [
                    "code",
                    "message"
                  ]
                }
              }
            }
          },
          "404": {
            "description": "记录不存在",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "integer"
                    },
                    "message": {
                      "type": "string"
                    }
                  },
                  "required": [
                    "code",
                    "message"
                  ]
                }
              }
            }
          }
        },
        "security": []
      },
      "delete": {
        "summary": "删除宠物信息",
        "deprecated": false,
        "description": "",
        "tags": [
          "宠物"
        ],
        "parameters": [
          {
            "name": "petId",
            "in": "path",
            "description": "Pet id to delete",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "api_key",
            "in": "header",
            "description": "",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "成功",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "integer",
                      "minimum": 0,
                      "maximum": 0
                    }
                  },
                  "required": [
                    "code"
                  ]
                },
                "examples": {
                  "1": {
                    "summary": "成功示例",
                    "value": {
                      "code": 0
                    }
                  }
                }
              }
            }
          }
        },
        "security": []
      }
    },
    "/transportOrders/dispatcher/trigger": {
      "post": {
        "summary": "Explicitly triggers dispatching of vehicles / transport orders.",
        "deprecated": false,
        "description": "Triggers the kernel's dispatcher to assign vehicles to transport orders. This usually happens automatically, but depending on the kernel configuration, explicitly triggering it may be necessary.",
        "tags": [
          "Transport orders"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {}
                }
              }
            }
          }
        },
        "security": []
      }
    },
    "/vehicles/dispatcher/trigger": {
      "post": {
        "summary": "Explicitly triggers dispatching of vehicles / transport orders.",
        "deprecated": false,
        "description": "Triggers the kernel's dispatcher to assign vehicles to transport orders. This usually happens automatically, but depending on the kernel configuration, explicitly triggering it may be necessary.",
        "tags": [
          "Vehicles"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {}
                }
              }
            }
          }
        },
        "security": []
      }
    },
    "/peripheralJobs/dispatcher/trigger": {
      "post": {
        "summary": "Explicitly triggers dispatching of peripheral jobs.",
        "deprecated": false,
        "description": "Triggers the kernel's dispatcher to assign peripheral jobs to peripheral devices. This usually happens automatically, but depending on the kernel configuration, explicitly triggering it may be necessary.",
        "tags": [
          "Peripheral jobs"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {}
                }
              }
            }
          }
        },
        "security": []
      }
    },
    "/plantModel/topologyUpdateRequest": {
      "post": {
        "summary": "触发拓扑更新，重新规划路径",
        "deprecated": false,
        "description": "",
        "tags": [
          "Plant models"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "Successful response.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {}
                }
              }
            }
          }
        },
        "security": []
      }
    },
    "/peripherals/dispatcher/trigger": {
      "post": {
        "summary": "Explicitly triggers dispatching of peripheral jobs/devices.",
        "deprecated": false,
        "description": "Triggers the kernel's dispatcher to assign peripheral jobs to peripheral devices. This usually happens automatically, but depending on the kernel configuration, explicitly triggering it may be necessary.",
        "tags": [
          "Peripherals"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {}
                }
              }
            }
          }
        },
        "security": []
      }
    },
    "/orderSequences": {
      "get": {
        "summary": "Retrieves a set of order sequences.",
        "deprecated": false,
        "description": "",
        "tags": [
          "Order Sequences"
        ],
        "parameters": [
          {
            "name": "intendedVehicle",
            "in": "query",
            "description": "The name of the vehicle that is intended to process the order sequences to be retrieved.",
            "required": false,
            "schema": {
              "type": "string",
              "default": null
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "title": "ArrayOfOrderSequences",
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/OrderSequenceState"
                  }
                }
              }
            }
          },
          "404": {
            "description": "Referencing object that could not be found.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "string",
                    "description": "Details on the actual error.",
                    "examples": [
                      "Could not find the intended vehicle 'Vehicle-0001'."
                    ]
                  }
                }
              }
            }
          }
        },
        "security": []
      }
    },
    "/events": {
      "get": {
        "summary": "Retrieves a list of events.",
        "deprecated": false,
        "description": "This operation uses *long polling* to avoid excessive load on the server: Set the *timeout* parameter to a value that indicates how long the operation may wait if there currently aren't any events to be returned.",
        "tags": [
          "Status"
        ],
        "parameters": [
          {
            "name": "minSequenceNo",
            "in": "query",
            "description": "The minimum sequence number of events to be retrieved. Can/Should be used to filter out events that have already been retrieved. (Set this to the maximum sequence number already seen, incremented by 1.)",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int64",
              "default": 0
            }
          },
          {
            "name": "maxSequenceNo",
            "in": "query",
            "description": "The maximum sequence number of events to be retrieved. Can/Should be used to limit the number of events retrieved. (Set this to e.g. *minSequenceNo* + 100.)",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int64",
              "default": "9223372036854775807"
            }
          },
          {
            "name": "timeout",
            "in": "query",
            "description": "The time (in milliseconds) to wait for events to arrive if there currently are not any events to be returned. May not be greater than 10000.",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int64",
              "default": 1000
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StatusMessageList"
                }
              }
            }
          },
          "400": {
            "description": "Invalid parameter value(s).",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "string",
                    "description": "Details on the actual error.",
                    "examples": [
                      "Parameter 'timeout' is not in the correct range."
                    ]
                  }
                }
              }
            }
          }
        },
        "security": []
      }
    },
    "/pet": {
      "post": {
        "summary": "新建宠物信息",
        "deprecated": false,
        "description": "",
        "tags": [
          "宠物"
        ],
        "parameters": [],
        "requestBody": {
          "content": {
            "application/x-www-form-urlencoded": {
              "schema": {
                "type": "object",
                "properties": {
                  "name": {
                    "description": "宠物名",
                    "example": "Hello Kitty",
                    "type": "string"
                  },
                  "status": {
                    "description": "宠物销售状态",
                    "example": "sold",
                    "type": "string"
                  }
                },
                "required": [
                  "name",
                  "status"
                ]
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "成功",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "integer",
                      "minimum": 0,
                      "maximum": 0
                    },
                    "data": {
                      "$ref": "#/components/schemas/Pet",
                      "description": "宠物信息"
                    }
                  },
                  "required": [
                    "code",
                    "data"
                  ]
                },
                "examples": {
                  "1": {
                    "summary": "成功示例",
                    "value": {
                      "code": 0,
                      "data": {
                        "name": "Hello Kity",
                        "photoUrls": [
                          "http://dummyimage.com/400x400"
                        ],
                        "id": 3,
                        "category": {
                          "id": 71,
                          "name": "Cat"
                        },
                        "tags": [
                          {
                            "id": 22,
                            "name": "Cat"
                          }
                        ],
                        "status": "sold"
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "security": []
      },
      "put": {
        "summary": "修改宠物信息",
        "deprecated": false,
        "description": "",
        "tags": [
          "宠物"
        ],
        "parameters": [],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {}
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "成功",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "integer"
                    },
                    "data": {
                      "$ref": "#/components/schemas/Pet",
                      "description": "宠物信息"
                    }
                  },
                  "required": [
                    "code",
                    "data"
                  ]
                },
                "examples": {
                  "1": {
                    "summary": "成功示例",
                    "value": {
                      "code": 0,
                      "data": {
                        "name": "Hello Kity",
                        "photoUrls": [
                          "http://dummyimage.com/400x400"
                        ],
                        "id": 3,
                        "category": {
                          "id": 71,
                          "name": "Cat"
                        },
                        "tags": [
                          {
                            "id": 22,
                            "name": "Cat"
                          }
                        ],
                        "status": "sold"
                      }
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "记录不存在",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {}
                }
              }
            }
          },
          "405": {
            "description": "验证错误",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {}
                }
              }
            }
          }
        },
        "security": []
      }
    },
    "/transportOrders": {
      "get": {
        "summary": "获取所有订单信息",
        "deprecated": false,
        "description": "",
        "tags": [
          "Transport orders"
        ],
        "parameters": [
          {
            "name": "intendedVehicle",
            "in": "query",
            "description": "The name of the vehicle that is intended to process the transport orders to be retrieved.",
            "required": false,
            "schema": {
              "type": "string",
              "default": null
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "title": "ArrayOfTransportOrders",
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/TransportOrderState"
                  }
                }
              }
            }
          },
          "404": {
            "description": "Referencing object that could not be found.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "string",
                    "description": "Details on the actual error.",
                    "examples": [
                      "Could not find the intended vehicle 'Vehicle-0001'."
                    ]
                  }
                }
              }
            }
          }
        },
        "security": []
      }
    },
    "/vehicles": {
      "get": {
        "summary": "获取所有车辆状态",
        "deprecated": false,
        "description": "",
        "tags": [
          "Vehicles"
        ],
        "parameters": [
          {
            "name": "procState",
            "in": "query",
            "description": "The processing state of the vehicles to be retrieved.",
            "required": false,
            "example": "IDLE",
            "schema": {
              "type": "string",
              "default": null,
              "enum": [
                "IDLE",
                "AWAITING_ORDER",
                "PROCESSING_ORDER"
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "title": "ArrayOfVehicles",
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/VehicleState"
                  }
                }
              }
            }
          },
          "400": {
            "description": "The submitted data is invalid.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "string",
                    "description": "Details on the actual error.",
                    "examples": [
                      "Could not parse input."
                    ]
                  }
                }
              }
            }
          }
        },
        "security": []
      }
    },
    "/peripheralJobs": {
      "get": {
        "summary": "Retrieves a set of peripheral jobs.",
        "deprecated": false,
        "description": "",
        "tags": [
          "Peripheral jobs"
        ],
        "parameters": [
          {
            "name": "relatedVehicle",
            "in": "query",
            "description": "The name of the vehicle for which the peripheral jobs to be retrieved were created.",
            "required": false,
            "schema": {
              "type": "string",
              "default": null
            }
          },
          {
            "name": "relatedTransportOrder",
            "in": "query",
            "description": "The name of the transport order for which the peripheral jobs to be retrieved were created.",
            "required": false,
            "schema": {
              "type": "string",
              "default": null
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "title": "ArrayOfPeripheralJobs",
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/PeripheralJobState"
                  }
                }
              }
            }
          },
          "404": {
            "description": "Referencing object that could not be found.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "string",
                    "description": "Details on the actual error.",
                    "examples": [
                      "Could not find the related vehicle 'Vehicle-0001'."
                    ]
                  }
                }
              }
            }
          }
        },
        "security": []
      }
    },
    "/plantModel": {
      "get": {
        "summary": "获取当前工厂拓扑模型",
        "deprecated": false,
        "description": "",
        "tags": [
          "Plant models"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PlantModel"
                }
              }
            }
          }
        },
        "security": []
      },
      "put": {
        "summary": "上传工厂拓扑模型",
        "deprecated": false,
        "description": "",
        "tags": [
          "Plant models"
        ],
        "parameters": [],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PlantModel"
              },
              "example": {
                "visualLayout": {
                  "name": "some visual layout",
                  "scaleX": 50,
                  "scaleY": 50,
                  "layers": [
                    {
                      "id": 0,
                      "ordinal": 0,
                      "visible": true,
                      "name": "some layer",
                      "groupId": 0
                    }
                  ],
                  "layerGroups": [
                    {
                      "id": 0,
                      "name": "some layer",
                      "visible": true
                    }
                  ],
                  "properties": [
                    {
                      "name": "visualLayoutProperty",
                      "value": "value"
                    }
                  ]
                },
                "name": "Plant Model 01",
                "properties": [
                  {
                    "name": "modelPropertyExample",
                    "value": "value"
                  }
                ],
                "blocks": [
                  {
                    "name": "Block-01",
                    "type": "SINGLE_VEHICLE_ONLY",
                    "memberNames": [
                      "Path-BC",
                      "Path-DA"
                    ],
                    "layout": {
                      "color": "#FF0000"
                    }
                  }
                ],
                "vehicles": [
                  {
                    "name": "Vehicle-01",
                    "length": 1000,
                    "energyLevelCritical": 15,
                    "energyLevelGood": 50,
                    "energyLevelFullyRecharged": 97,
                    "energyLevelSufficientlyRecharged": 75,
                    "maxVelocity": 1500,
                    "maxReverseVelocity": 750,
                    "layout": {
                      "routeColor": "#00FF00"
                    }
                  },
                  {
                    "name": "Vehicle-02",
                    "length": 1000,
                    "energyLevelCritical": 15,
                    "energyLevelGood": 50,
                    "energyLevelFullyRecharged": 97,
                    "energyLevelSufficientlyRecharged": 75,
                    "maxVelocity": 1500,
                    "maxReverseVelocity": 750,
                    "layout": {
                      "routeColor": "#550055"
                    }
                  }
                ],
                "locationTypes": [
                  {
                    "name": "Transfer-station",
                    "allowedOperations": [
                      "Load cargo",
                      "Unload cargo"
                    ],
                    "layout": {
                      "locationRepresentation": "LOAD_TRANSFER_GENERIC"
                    },
                    "properties": [
                      {
                        "name": "locationTypePropertyKey",
                        "value": "locationTypePropertyValue"
                      }
                    ]
                  },
                  {
                    "name": "Working-station",
                    "allowedOperations": [
                      "Cut",
                      "Drill"
                    ],
                    "layout": {
                      "locationRepresentation": "WORKING_GENERIC"
                    }
                  }
                ],
                "points": [
                  {
                    "name": "Point-A",
                    "vehicleOrientationAngle": 90,
                    "type": "HALT_POSITION",
                    "position": {
                      "x": 15000,
                      "y": 20000,
                      "z": 0
                    },
                    "layout": {
                      "layerId": 0,
                      "position": {
                        "x": 15000,
                        "y": 20000
                      },
                      "labelOffset": {
                        "x": 10,
                        "y": 10
                      }
                    },
                    "properties": [
                      {
                        "name": "isExampleProperty",
                        "value": true
                      }
                    ]
                  },
                  {
                    "name": "Point-B",
                    "vehicleOrientationAngle": 90,
                    "type": "HALT_POSITION",
                    "position": {
                      "x": 30000,
                      "y": 20000,
                      "z": 0
                    },
                    "layout": {
                      "layerId": 0,
                      "position": {
                        "x": 30000,
                        "y": 20000
                      },
                      "labelOffset": {
                        "x": 10,
                        "y": 10
                      }
                    },
                    "properties": [
                      {
                        "name": "isExampleProperty",
                        "value": true
                      }
                    ]
                  },
                  {
                    "name": "Point-C",
                    "vehicleOrientationAngle": "NaN",
                    "type": "HALT_POSITION",
                    "position": {
                      "x": 10000,
                      "y": 30000,
                      "z": 0
                    },
                    "layout": {
                      "layerId": 0,
                      "position": {
                        "x": 10000,
                        "y": 30000
                      },
                      "labelOffset": {
                        "x": 10,
                        "y": 10
                      }
                    }
                  },
                  {
                    "name": "Point-D",
                    "vehicleOrientationAngle": "NaN",
                    "type": "HALT_POSITION",
                    "position": {
                      "x": 25000,
                      "y": 30000,
                      "z": 0
                    },
                    "layout": {
                      "layerId": 0,
                      "position": {
                        "x": 25000,
                        "y": 30000
                      },
                      "labelOffset": {
                        "x": 10,
                        "y": 10
                      }
                    }
                  }
                ],
                "paths": [
                  {
                    "name": "Path-AB",
                    "srcPointName": "Point-A",
                    "destPointName": "Point-B",
                    "maxVelocity": 2500,
                    "maxReverseVelocity": 2500,
                    "locked": false,
                    "layout": {
                      "connectionType": "DIRECT",
                      "layerId": 0
                    },
                    "properties": [
                      {
                        "name": "pathPropertyKey",
                        "value": "exampleValue"
                      }
                    ]
                  },
                  {
                    "name": "Path-BC",
                    "srcPointName": "Point-B",
                    "destPointName": "Point-C",
                    "maxVelocity": 2500,
                    "maxReverseVelocity": 2500,
                    "layout": {
                      "connectionType": "DIRECT",
                      "layerId": 0
                    }
                  },
                  {
                    "name": "Path-CA",
                    "srcPointName": "Point-C",
                    "destPointName": "Point-A",
                    "maxVelocity": 2500,
                    "maxReverseVelocity": 2500,
                    "layout": {
                      "connectionType": "DIRECT",
                      "layerId": 0
                    }
                  },
                  {
                    "name": "Path-CD",
                    "srcPointName": "Point-C",
                    "destPointName": "Point-D",
                    "maxVelocity": 1500,
                    "maxReverseVelocity": 1000,
                    "layout": {
                      "connectionType": "DIRECT",
                      "layerId": 0
                    }
                  },
                  {
                    "name": "Path-DA",
                    "srcPointName": "Point-D",
                    "destPointName": "Point-A",
                    "maxVelocity": 2500,
                    "maxReverseVelocity": 2500,
                    "layout": {
                      "connectionType": "DIRECT",
                      "layerId": 0
                    }
                  },
                  {
                    "name": "Path-DB",
                    "srcPointName": "Point-D",
                    "destPointName": "Point-B",
                    "maxVelocity": 2500,
                    "maxReverseVelocity": 2500,
                    "layout": {
                      "connectionType": "DIRECT",
                      "layerId": 0
                    }
                  }
                ],
                "locations": [
                  {
                    "name": "Storage 01",
                    "typeName": "Transfer-station",
                    "locked": false,
                    "position": {
                      "x": 15000,
                      "y": 10000,
                      "z": 0
                    },
                    "links": [
                      {
                        "pointName": "Point-A"
                      }
                    ],
                    "layout": {
                      "locationRepresentation": "LOAD_TRANSFER_ALT_1",
                      "layerId": 0,
                      "position": {
                        "x": 15000,
                        "y": 10000
                      },
                      "labelOffset": {
                        "x": 10,
                        "y": 10
                      }
                    }
                  },
                  {
                    "name": "Storage 02",
                    "typeName": "Transfer-station",
                    "locked": false,
                    "position": {
                      "x": 30000,
                      "y": 10000,
                      "z": 0
                    },
                    "links": [
                      {
                        "pointName": "Point-B"
                      }
                    ],
                    "layout": {
                      "layerId": 0,
                      "position": {
                        "x": 30000,
                        "y": 10000
                      },
                      "labelOffset": {
                        "x": 10,
                        "y": 10
                      }
                    }
                  },
                  {
                    "name": "Workshop",
                    "typeName": "Working-station",
                    "locked": false,
                    "position": {
                      "x": 35000,
                      "y": 30000,
                      "z": 0
                    },
                    "links": [
                      {
                        "pointName": "Point-D"
                      }
                    ],
                    "layout": {
                      "layerId": 0,
                      "position": {
                        "x": 35000,
                        "y": 30000
                      },
                      "labelOffset": {
                        "x": 10,
                        "y": 10
                      }
                    }
                  },
                  {
                    "name": "Loading Bay",
                    "typeName": "Transfer-station",
                    "locked": false,
                    "position": {
                      "x": 0,
                      "y": 30000,
                      "z": 0
                    },
                    "links": [
                      {
                        "pointName": "Point-C"
                      }
                    ],
                    "layout": {
                      "layerId": 0,
                      "position": {
                        "x": 0,
                        "y": 30000
                      },
                      "labelOffset": {
                        "x": 10,
                        "y": 10
                      }
                    }
                  }
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "*/*": {
                "schema": {
                  "type": "object",
                  "properties": {}
                }
              }
            }
          },
          "400": {
            "description": "The submitted plant model is invalid.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "string",
                    "description": "Details on the actual error.",
                    "examples": [
                      "Could not parse JSON input."
                    ]
                  }
                }
              }
            }
          }
        },
        "security": []
      }
    },
    "/peripherals/{NAME}/commAdapter/attachmentInformation": {
      "get": {
        "summary": "Retrieves the driver attachment information of this peripheral.",
        "deprecated": false,
        "description": "",
        "tags": [
          "Peripherals"
        ],
        "parameters": [
          {
            "name": "NAME",
            "in": "path",
            "description": "The name of the peripheral device/location.",
            "required": true,
            "example": "",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PeripheralAttachmentInformation"
                }
              }
            }
          },
          "404": {
            "description": "Referencing object that could not be found.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "string",
                    "description": "Details on the actual error.",
                    "examples": [
                      "Could not find location 'Fire door 002'."
                    ]
                  }
                }
              }
            }
          }
        },
        "security": []
      }
    },
    "/orderSequences/{NAME}/complete": {
      "put": {
        "summary": "Sets the complete flag for the named order sequence.",
        "deprecated": false,
        "description": "",
        "tags": [
          "Order Sequences"
        ],
        "parameters": [
          {
            "name": "NAME",
            "in": "path",
            "description": "The name of the order sequence.",
            "required": true,
            "example": "",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {}
                }
              }
            }
          },
          "404": {
            "description": "Referencing object that could not be found.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "string",
                    "description": "Details on the actual error.",
                    "examples": [
                      "Could not find order sequence 'Sequence-002'."
                    ]
                  }
                }
              }
            }
          }
        },
        "security": []
      }
    },
    "/transportOrders/{NAME}/withdrawal": {
      "post": {
        "summary": "根据订单名称取消某个订单",
        "deprecated": false,
        "description": "",
        "tags": [
          "Transport orders"
        ],
        "parameters": [
          {
            "name": "NAME",
            "in": "path",
            "description": "The name of the transport order to be withdrawn.",
            "required": true,
            "example": "",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "immediate",
            "in": "query",
            "description": "Whether the transport order should be aborted as quickly as possible.",
            "required": false,
            "schema": {
              "type": "boolean",
              "default": false
            }
          },
          {
            "name": "disableVehicle",
            "in": "query",
            "description": "Deprecated, explicitly set the vehicle's integration level, instead.",
            "required": false,
            "schema": {
              "type": "boolean",
              "default": false
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {}
                }
              }
            }
          },
          "404": {
            "description": "Referencing object that could not be found.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "string",
                    "description": "Details on the actual error.",
                    "examples": [
                      "Could not find transport order 'TOrder-01'."
                    ]
                  }
                }
              }
            }
          }
        },
        "security": []
      }
    },
    "/vehicles/{NAME}": {
      "get": {
        "summary": "获取某个车辆状态",
        "deprecated": false,
        "description": "",
        "tags": [
          "Vehicles"
        ],
        "parameters": [
          {
            "name": "NAME",
            "in": "path",
            "description": "The name of the vehicle to be retrieved.",
            "required": true,
            "example": "",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/VehicleState"
                }
              }
            }
          },
          "404": {
            "description": "Referencing object that could not be found.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "string",
                    "description": "Details on the actual error.",
                    "examples": [
                      "Could not find vehicle 'Vehicle-0001'."
                    ]
                  }
                }
              }
            }
          }
        },
        "security": []
      }
    },
    "/peripheralJobs/{NAME}/withdrawal": {
      "post": {
        "summary": "Withdraws the peripheral job with the given name.",
        "deprecated": false,
        "description": "",
        "tags": [
          "Peripheral jobs"
        ],
        "parameters": [
          {
            "name": "NAME",
            "in": "path",
            "description": "The name of the peripheral job to be withdrawn.",
            "required": true,
            "example": "",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {}
                }
              }
            }
          },
          "404": {
            "description": "Referencing object that could not be found.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "string",
                    "description": "Details on the actual error.",
                    "examples": [
                      "Could not find peripheral job 'PJob-01'."
                    ]
                  }
                }
              }
            }
          }
        },
        "security": []
      }
    },
    "/peripherals/{NAME}/commAdapter/enabled": {
      "put": {
        "summary": "Sets the enabled state for the named peripheral's driver.",
        "deprecated": false,
        "description": "",
        "tags": [
          "Peripherals"
        ],
        "parameters": [
          {
            "name": "NAME",
            "in": "path",
            "description": "The name of the peripheral device/location.",
            "required": true,
            "example": "",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "newValue",
            "in": "query",
            "description": "The peripheral driver's new enabled state.",
            "required": true,
            "example": "true",
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {}
                }
              }
            }
          },
          "404": {
            "description": "Referencing object that could not be found.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "string",
                    "description": "Details on the actual error.",
                    "examples": [
                      "Could not find location 'Fire door 003'."
                    ]
                  }
                }
              }
            }
          }
        },
        "security": []
      }
    },
    "/orderSequences/{NAME}": {
      "get": {
        "summary": "Retrieves a single named order sequence.",
        "deprecated": false,
        "description": "",
        "tags": [
          "Order Sequences"
        ],
        "parameters": [
          {
            "name": "NAME",
            "in": "path",
            "description": "The name of the order sequence to be retrieved.",
            "required": true,
            "example": "",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OrderSequenceState"
                }
              }
            }
          },
          "404": {
            "description": "Referencing object that could not be found.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "string",
                    "description": "Details on the actual error.",
                    "examples": [
                      "Could not find order sequence 'Sequence-002'."
                    ]
                  }
                }
              }
            }
          }
        },
        "security": []
      },
      "post": {
        "summary": "Creates a new order sequence with the given name.",
        "deprecated": false,
        "description": "",
        "tags": [
          "Order Sequences"
        ],
        "parameters": [
          {
            "name": "NAME",
            "in": "path",
            "description": "The name of the order sequence to be created.",
            "required": true,
            "example": "",
            "schema": {
              "type": "string",
              "examples": [
                "OrderSequence-01"
              ]
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/OrderSequence"
              },
              "example": ""
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OrderSequenceState"
                }
              }
            }
          },
          "400": {
            "description": "The submitted data is invalid.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "string",
                    "description": "Details on the actual error.",
                    "examples": [
                      "Could not parse JSON input."
                    ]
                  }
                }
              }
            }
          },
          "404": {
            "description": "Referencing object that could not be found.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "string",
                    "description": "Details on the actual error.",
                    "examples": [
                      "Could not find Vehicle 'Vehicle-002'."
                    ]
                  }
                }
              }
            }
          },
          "409": {
            "description": "An object with the same name already exists in the model.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "string",
                    "description": "Details on the actual error.",
                    "examples": [
                      "Order sequence 'Sequence-002' already exists."
                    ]
                  }
                }
              }
            }
          }
        },
        "security": []
      }
    },
    "/transportOrders/{NAME}/intendedVehicle": {
      "put": {
        "summary": "Updates the transport order's intended vehicle.",
        "deprecated": false,
        "description": "",
        "tags": [
          "Transport orders"
        ],
        "parameters": [
          {
            "name": "NAME",
            "in": "path",
            "description": "The name of the transport order to be updated.",
            "required": true,
            "example": "",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "vehicle",
            "in": "query",
            "description": "The name of the vehicle to assign the transport order to.",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {}
                }
              }
            }
          },
          "404": {
            "description": "Referencing object that could not be found.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "string",
                    "description": "Details on the actual error.",
                    "examples": [
                      "Could not find transport order 'TOrder-01'."
                    ]
                  }
                }
              }
            }
          }
        },
        "security": []
      }
    },
    "/vehicles/{NAME}/withdrawal": {
      "post": {
        "summary": "取消某个车辆的订单",
        "deprecated": false,
        "description": "",
        "tags": [
          "Vehicles"
        ],
        "parameters": [
          {
            "name": "NAME",
            "in": "path",
            "description": "Name of the vehicle processing the transport order to be withdrawn",
            "required": true,
            "example": "",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "immediate",
            "in": "query",
            "description": "Whether the transport order should be aborted as quickly as possible.",
            "required": false,
            "schema": {
              "type": "boolean",
              "default": false
            }
          },
          {
            "name": "disableVehicle",
            "in": "query",
            "description": "Deprecated, explicitly set the vehicle's integration level, instead.",
            "required": false,
            "schema": {
              "type": "boolean",
              "default": false
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {}
                }
              }
            }
          },
          "404": {
            "description": "Referencing object that could not be found.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "string",
                    "description": "Details on the actual error.",
                    "examples": [
                      "Could not find vehicle 'Vehicle-0001'."
                    ]
                  }
                }
              }
            }
          }
        },
        "security": []
      }
    },
    "/peripheralJobs/{NAME}": {
      "get": {
        "summary": "Retrieves a single named peripheral job.",
        "deprecated": false,
        "description": "",
        "tags": [
          "Peripheral jobs"
        ],
        "parameters": [
          {
            "name": "NAME",
            "in": "path",
            "description": "The name of the peripheral job to be retrieved.",
            "required": true,
            "example": "",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PeripheralJobState"
                }
              }
            }
          },
          "404": {
            "description": "Referencing object that could not be found.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "string",
                    "description": "Details on the actual error.",
                    "examples": [
                      "Could not find peripheral job 'PJob-01'."
                    ]
                  }
                }
              }
            }
          }
        },
        "security": []
      },
      "post": {
        "summary": "Creates a new peripheral job with the given name.",
        "deprecated": false,
        "description": "",
        "tags": [
          "Peripheral jobs"
        ],
        "parameters": [
          {
            "name": "NAME",
            "in": "path",
            "description": "The name of the peripheral job to be created.",
            "required": true,
            "example": "",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PeripheralJob"
              },
              "example": ""
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PeripheralJobState"
                }
              }
            }
          },
          "400": {
            "description": "The submitted data is invalid.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "string",
                    "description": "Details on the actual error.",
                    "examples": [
                      "Could not parse JSON input."
                    ]
                  }
                }
              }
            }
          },
          "404": {
            "description": "Referencing object that could not be found.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "string",
                    "description": "Details on the actual error.",
                    "examples": [
                      "Could not find related vehicle 'Vehicle-0001'."
                    ]
                  }
                }
              }
            }
          },
          "409": {
            "description": "An object with the same name already exists in the model.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "string",
                    "description": "Details on the actual error.",
                    "examples": [
                      "Peripheral job 'PJob-01' already exists."
                    ]
                  }
                }
              }
            }
          }
        },
        "security": []
      }
    },
    "/paths/{NAME}/locked": {
      "put": {
        "summary": "更改路径的lock状态",
        "deprecated": false,
        "description": "",
        "tags": [
          "Plant models"
        ],
        "parameters": [
          {
            "name": "NAME",
            "in": "path",
            "description": "The name of the path.",
            "required": true,
            "example": "",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "newValue",
            "in": "query",
            "description": "The path's new locked state.",
            "required": true,
            "example": "true",
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {}
                }
              }
            }
          },
          "404": {
            "description": "Referencing object that could not be found.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "string",
                    "description": "Details on the actual error.",
                    "examples": [
                      "Could not find path 'Point-0001 --- Point-0002'."
                    ]
                  }
                }
              }
            }
          }
        },
        "security": []
      }
    },
    "/peripherals/{NAME}/withdrawal": {
      "post": {
        "summary": "Withdraws the peripheral jobs assigned to the given peripheral.",
        "deprecated": false,
        "description": "",
        "tags": [
          "Peripherals"
        ],
        "parameters": [
          {
            "name": "NAME",
            "in": "path",
            "description": "The name of the peripheral device/location.",
            "required": true,
            "example": "",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {}
                }
              }
            }
          },
          "404": {
            "description": "Referencing object that could not be found.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "string",
                    "description": "Details on the actual error.",
                    "examples": [
                      "Could not find location 'Fire door 003'."
                    ]
                  }
                }
              }
            }
          }
        },
        "security": []
      }
    },
    "/pet/findByStatus": {
      "get": {
        "summary": "根据状态查找宠物列表",
        "deprecated": false,
        "description": "",
        "tags": [
          "宠物"
        ],
        "parameters": [
          {
            "name": "status",
            "in": "query",
            "description": "Status values that need to be considered for filter",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "成功",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Pet",
                    "description": "宠物信息"
                  }
                },
                "examples": {
                  "1": {
                    "summary": "成功示例",
                    "value": {
                      "code": 0,
                      "data": [
                        {
                          "name": "Hello Kity",
                          "photoUrls": [
                            "http://dummyimage.com/400x400"
                          ],
                          "id": 3,
                          "category": {
                            "id": 71,
                            "name": "Cat"
                          },
                          "tags": [
                            {
                              "id": 22,
                              "name": "Cat"
                            }
                          ],
                          "status": "sold"
                        },
                        {
                          "name": "White Dog",
                          "photoUrls": [
                            "http://dummyimage.com/400x400"
                          ],
                          "id": 3,
                          "category": {
                            "id": 71,
                            "name": "Dog"
                          },
                          "tags": [
                            {
                              "id": 22,
                              "name": "Dog"
                            }
                          ],
                          "status": "sold"
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "错误的 status 值",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "integer"
                    }
                  },
                  "required": [
                    "code"
                  ]
                }
              }
            }
          }
        },
        "security": []
      }
    },
    "/transportOrders/{NAME}/immediateAssignment": {
      "post": {
        "summary": "Immediately assigns the transport order to its intended vehicle.",
        "deprecated": false,
        "description": "",
        "tags": [
          "Transport orders"
        ],
        "parameters": [
          {
            "name": "NAME",
            "in": "path",
            "description": "The name of the transport order to be assigned.",
            "required": true,
            "example": "",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {}
                }
              }
            }
          },
          "400": {
            "description": "Referencing transport order with invalid state.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "string",
                    "description": "Details on the actual error.",
                    "examples": [
                      "Could not assign transport order 'TOrder-01' to vehicle 'Vehicle-0001'."
                    ]
                  }
                }
              }
            }
          },
          "404": {
            "description": "Referencing object that could not be found.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "string",
                    "description": "Details on the actual error.",
                    "examples": [
                      "Could not find transport order 'TOrder-01'."
                    ]
                  }
                }
              }
            }
          }
        },
        "security": []
      }
    },
    "/vehicles/{NAME}/rerouteRequest": {
      "post": {
        "summary": "重新规划某个机器人的路径",
        "deprecated": false,
        "description": "",
        "tags": [
          "Vehicles"
        ],
        "parameters": [
          {
            "name": "NAME",
            "in": "path",
            "description": "Name of the vehicle to be rerouted",
            "required": true,
            "example": "",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "forced",
            "in": "query",
            "description": "Whether the vehicle should be rerouted even if it's not where it is expected to be.",
            "required": false,
            "schema": {
              "type": "boolean",
              "default": false
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {}
                }
              }
            }
          },
          "404": {
            "description": "Referencing object that could not be found.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "string",
                    "description": "Details on the actual error.",
                    "examples": [
                      "Could not find vehicle 'Vehicle-0001'."
                    ]
                  }
                }
              }
            }
          }
        },
        "security": []
      }
    },
    "/locations/{NAME}/locked": {
      "put": {
        "summary": "更改location的lock状态",
        "deprecated": false,
        "description": "",
        "tags": [
          "Plant models"
        ],
        "parameters": [
          {
            "name": "NAME",
            "in": "path",
            "description": "The name of the location.",
            "required": true,
            "example": "",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "newValue",
            "in": "query",
            "description": "The location's new locked state.",
            "required": true,
            "example": "true",
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {}
                }
              }
            }
          },
          "404": {
            "description": "Referencing object that could not be found.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "string",
                    "description": "Details on the actual error.",
                    "examples": [
                      "Could not find location 'Storage 01'."
                    ]
                  }
                }
              }
            }
          }
        },
        "security": []
      }
    },
    "/peripherals/{NAME}/commAdapter/attachment": {
      "put": {
        "summary": "Attaches the given peripheral driver to this peripheral.",
        "deprecated": false,
        "description": "",
        "tags": [
          "Peripherals"
        ],
        "parameters": [
          {
            "name": "NAME",
            "in": "path",
            "description": "The name of the peripheral device/location.",
            "required": true,
            "example": "",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "newValue",
            "in": "query",
            "description": "The description class name of the peripheral driver that is to be attached.",
            "required": true,
            "example": "org.opentcs.somePeripheral.driver001",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {}
                }
              }
            }
          },
          "400": {
            "description": "The submitted value is invalid.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "string",
                    "description": "Details on the actual error.",
                    "examples": [
                      "Unknown peripheral driver class name: org.opentcs.somePeripheral.driver0011"
                    ]
                  }
                }
              }
            }
          },
          "404": {
            "description": "Referencing object that could not be found.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "string",
                    "description": "Details on the actual error.",
                    "examples": [
                      "Could not find location 'Fire door 003'."
                    ]
                  }
                }
              }
            }
          }
        },
        "security": []
      }
    },
    "/transportOrders/{NAME}": {
      "get": {
        "summary": "获取某个订单信息",
        "deprecated": false,
        "description": "",
        "tags": [
          "Transport orders"
        ],
        "parameters": [
          {
            "name": "NAME",
            "in": "path",
            "description": "The name of the transport order to be retrieved.",
            "required": true,
            "example": "",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TransportOrderState"
                }
              }
            }
          },
          "404": {
            "description": "Referencing object that could not be found.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "string",
                    "description": "Details on the actual error.",
                    "examples": [
                      "Could not find transport order 'TOrder-01'."
                    ]
                  }
                }
              }
            }
          }
        },
        "security": []
      },
      "post": {
        "summary": "创建新订单",
        "deprecated": false,
        "description": "",
        "tags": [
          "Transport orders"
        ],
        "parameters": [
          {
            "name": "NAME",
            "in": "path",
            "description": "The name of the transport order to be created.",
            "required": true,
            "example": "dddddd2",
            "schema": {
              "type": "string",
              "examples": [
                "TOrder-002"
              ]
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/TransportOrder"
              },
              "example": {
                "incompleteName": false,
                "dispensable": false,
                "intendedVehicle": "Vehicle-01",
                "peripheralReservationToken": "Token-001",
                "wrappingSequence": "OrderSequence-01",
                "type": "Park",
                "destinations": [
                  {
                    "locationName": "Storage 01",
                    "operation": "Load cargo",
                    "properties": [
                      {
                        "name": "key1",
                        "value": "value1"
                      }
                    ]
                  }
                ],
                "properties": [
                  {
                    "key": "string",
                    "value": "string"
                  }
                ],
                "deadline": {},
                "dependencies": [
                  "TOrder-001"
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TransportOrder"
                }
              }
            }
          },
          "400": {
            "description": "The submitted data is invalid.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "string",
                    "description": "Details on the actual error.",
                    "examples": [
                      "Could not parse JSON input."
                    ]
                  }
                }
              }
            }
          },
          "404": {
            "description": "Referencing object that could not be found.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "string",
                    "description": "Details on the actual error.",
                    "examples": [
                      "Could not find location 'Storage 01'."
                    ]
                  }
                }
              }
            }
          },
          "409": {
            "description": "An object with the same name already exists in the model.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "string",
                    "description": "Details on the actual error.",
                    "examples": [
                      "Transport order 'TOrder-01' already exists."
                    ]
                  }
                }
              }
            }
          }
        },
        "security": []
      }
    },
    "/vehicles/{NAME}/integrationLevel": {
      "put": {
        "summary": "修改某个车辆的integration level",
        "deprecated": false,
        "description": "",
        "tags": [
          "Vehicles"
        ],
        "parameters": [
          {
            "name": "NAME",
            "in": "path",
            "description": "The name of the vehicle.",
            "required": true,
            "example": "",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "newValue",
            "in": "query",
            "description": "The vehicle's new integration level.",
            "required": true,
            "example": "TO_BE_RESPECTED",
            "schema": {
              "type": "string",
              "enum": [
                "TO_BE_UTILIZED",
                "TO_BE_RESPECTED",
                "TO_BE_NOTICED",
                "TO_BE_IGNORED"
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {}
                }
              }
            }
          },
          "404": {
            "description": "Referencing object that could not be found.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "string",
                    "description": "Details on the actual error.",
                    "examples": [
                      "Could not find vehicle 'Vehicle-0001'."
                    ]
                  }
                }
              }
            }
          }
        },
        "security": []
      }
    },
    "/vehicles/{NAME}/paused": {
      "put": {
        "summary": "修改某个车辆的暂停状态",
        "deprecated": false,
        "description": "",
        "tags": [
          "Vehicles"
        ],
        "parameters": [
          {
            "name": "NAME",
            "in": "path",
            "description": "The name of the vehicle.",
            "required": true,
            "example": "",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "newValue",
            "in": "query",
            "description": "The vehicle's new paused state.",
            "required": true,
            "example": "true",
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {}
                }
              }
            }
          },
          "404": {
            "description": "Referencing object that could not be found.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "string",
                    "description": "Details on the actual error.",
                    "examples": [
                      "Could not find vehicle 'Vehicle-0001'."
                    ]
                  }
                }
              }
            }
          }
        },
        "security": []
      }
    },
    "/vehicles/{NAME}/commAdapter/enabled": {
      "put": {
        "summary": "设置某个车辆的enable状态",
        "deprecated": false,
        "description": "",
        "tags": [
          "Vehicles"
        ],
        "parameters": [
          {
            "name": "NAME",
            "in": "path",
            "description": "The name of the vehicle.",
            "required": true,
            "example": "",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "newValue",
            "in": "query",
            "description": "The vehicle driver's new enabled state.",
            "required": true,
            "example": "true",
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {}
                }
              }
            }
          },
          "404": {
            "description": "Referencing object that could not be found.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "string",
                    "description": "Details on the actual error.",
                    "examples": [
                      "Could not find vehicle 'Vehicle-0001'."
                    ]
                  }
                }
              }
            }
          }
        },
        "security": []
      }
    },
    "/vehicles/{NAME}/envelopeKey": {
      "put": {
        "summary": "Sets the envelope key for this vehicle.",
        "deprecated": false,
        "description": "",
        "tags": [
          "Vehicles"
        ],
        "parameters": [
          {
            "name": "NAME",
            "in": "path",
            "description": "The name of the vehicle.",
            "required": true,
            "example": "",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "newValue",
            "in": "query",
            "description": "The vehicle's new envelope key.",
            "required": false,
            "example": "envelopeType-01",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {}
                }
              }
            }
          },
          "404": {
            "description": "Referencing object that could not be found.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "string",
                    "description": "Details on the actual error.",
                    "examples": [
                      "Could not find vehicle 'Vehicle-0001'."
                    ]
                  }
                }
              }
            }
          }
        },
        "security": []
      }
    },
    "/vehicles/{NAME}/allowedOrderTypes": {
      "put": {
        "summary": "Sets the allowed order types for the named vehicle.",
        "deprecated": false,
        "description": "",
        "tags": [
          "Vehicles"
        ],
        "parameters": [
          {
            "name": "NAME",
            "in": "path",
            "description": "The name of the vehicle.",
            "required": true,
            "example": "",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AllowedOrderTypes"
              },
              "example": ""
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {}
                }
              }
            }
          },
          "400": {
            "description": "The submitted data is invalid.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "string",
                    "description": "Details on the actual error.",
                    "examples": [
                      "Could not parse JSON input."
                    ]
                  }
                }
              }
            }
          },
          "404": {
            "description": "Referencing object that could not be found.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "string",
                    "description": "Details on the actual error.",
                    "examples": [
                      "Could not find vehicle 'Vehicle-0001'."
                    ]
                  }
                }
              }
            }
          }
        },
        "security": []
      }
    },
    "/vehicles/{NAME}/commAdapter/attachment": {
      "put": {
        "summary": "Attaches the given vehicle driver to this vehicle.",
        "deprecated": false,
        "description": "",
        "tags": [
          "Vehicles"
        ],
        "parameters": [
          {
            "name": "NAME",
            "in": "path",
            "description": "The name of the vehicle.",
            "required": true,
            "example": "",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "newValue",
            "in": "query",
            "description": "The description class name of the vehicle driver that is to be attached.",
            "required": true,
            "example": "org.opentcs.virtualvehicle.LoopbackCommunicationAdapterDescription",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {}
                }
              }
            }
          },
          "400": {
            "description": "The submitted value is invalid.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "string",
                    "description": "Details on the actual error.",
                    "examples": [
                      "Unknown vehicle driver class name: org.opentcs.someVehicle.driver11"
                    ]
                  }
                }
              }
            }
          },
          "404": {
            "description": "Referencing object that could not be found.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "string",
                    "description": "Details on the actual error.",
                    "examples": [
                      "Could not find vehicle 'Vehicle-0001'."
                    ]
                  }
                }
              }
            }
          }
        },
        "security": []
      }
    },
    "/vehicles/{NAME}/routeComputationQuery": {
      "post": {
        "summary": "给定某个终点，计算对应车辆到达该终点的路径",
        "deprecated": false,
        "description": "",
        "tags": [
          "Vehicles"
        ],
        "parameters": [
          {
            "name": "NAME",
            "in": "path",
            "description": "The name of the vehicle.",
            "required": true,
            "example": "",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RoutesRequest"
              },
              "example": ""
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RoutesResponse"
                }
              }
            }
          },
          "400": {
            "description": "The submitted request body is invalid.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "string",
                    "description": "Details on the actual error.",
                    "examples": [
                      "Could not parse JSON input."
                    ]
                  }
                }
              }
            }
          },
          "404": {
            "description": "Referencing object that could not be found.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "string",
                    "description": "Details on the actual error.",
                    "examples": [
                      "Unknown source point: Point-X"
                    ]
                  }
                }
              }
            }
          }
        },
        "security": []
      }
    }
  },
  "components": {
    "schemas": {
      "Property_": {
        "type": "object",
        "properties": {
          "key": {
            "type": "string"
          },
          "value": {
            "type": "string"
          }
        },
        "required": [
          "key",
          "value"
        ]
      },
      "PlantModel": {
        "title": "Plant model",
        "type": "object",
        "required": [
          "name"
        ],
        "properties": {
          "visualLayout": {
            "$ref": "#/components/schemas/PlantModelVisualLayout"
          },
          "name": {
            "type": "string",
            "description": "The plant model's name.",
            "examples": [
              "Plant Model 01"
            ]
          },
          "properties": {
            "type": "array",
            "description": "The plant model's properties.",
            "items": {
              "type": "string"
            }
          },
          "blocks": {
            "type": "array",
            "description": "The plant model's blocks.",
            "items": {
              "$ref": "#/components/schemas/PlantModelBlock"
            },
            "examples": [
              [
                {
                  "name": "Block-01",
                  "type": "SINGLE_VEHICLE_ONLY",
                  "memberNames": [
                    "Path-BC",
                    "Path-DA"
                  ],
                  "layout": {
                    "color": "#FF0000"
                  }
                }
              ]
            ]
          },
          "vehicles": {
            "type": "array",
            "description": "The plant model's vehicles.",
            "items": {
              "$ref": "#/components/schemas/PlantModelVehicle"
            },
            "examples": [
              [
                {
                  "name": "Vehicle-01",
                  "length": 1000,
                  "energyLevelCritical": 15,
                  "energyLevelGood": 50,
                  "energyLevelFullyRecharged": 97,
                  "energyLevelSufficientlyRecharged": 75,
                  "maxVelocity": 1500,
                  "maxReverseVelocity": 750,
                  "layout": {
                    "routeColor": "#00FF00"
                  }
                },
                {
                  "name": "Vehicle-02",
                  "length": 1000,
                  "energyLevelCritical": 15,
                  "energyLevelGood": 50,
                  "energyLevelFullyRecharged": 97,
                  "energyLevelSufficientlyRecharged": 75,
                  "maxVelocity": 1500,
                  "maxReverseVelocity": 750,
                  "layout": {
                    "routeColor": "#550055"
                  }
                }
              ]
            ]
          },
          "locationTypes": {
            "type": "array",
            "description": "The plant model's location types.",
            "items": {
              "$ref": "#/components/schemas/PlantModelLocationType"
            },
            "examples": [
              [
                {
                  "name": "Transfer-station",
                  "allowedOperations": [
                    "Load cargo",
                    "Unload cargo"
                  ],
                  "layout": {
                    "locationRepresentation": "LOAD_TRANSFER_GENERIC"
                  },
                  "properties": [
                    {
                      "name": "locationTypePropertyKey",
                      "value": "locationTypePropertyValue"
                    }
                  ]
                },
                {
                  "name": "Working-station",
                  "allowedOperations": [
                    "Cut",
                    "Drill"
                  ],
                  "layout": {
                    "locationRepresentation": "WORKING_GENERIC"
                  }
                }
              ]
            ]
          },
          "points": {
            "type": "array",
            "description": "The plant model's points.",
            "items": {
              "$ref": "#/components/schemas/PlantModelPoint"
            },
            "examples": [
              [
                {
                  "name": "Point-A",
                  "vehicleOrientationAngle": 90,
                  "type": "HALT_POSITION",
                  "position": {
                    "x": 15000,
                    "y": 20000,
                    "z": 0
                  },
                  "layout": {
                    "layerId": 0,
                    "position": {
                      "x": 15000,
                      "y": 20000
                    },
                    "labelOffset": {
                      "x": 10,
                      "y": 10
                    }
                  },
                  "properties": [
                    {
                      "name": "isExampleProperty",
                      "value": true
                    }
                  ]
                },
                {
                  "name": "Point-B",
                  "vehicleOrientationAngle": 90,
                  "type": "HALT_POSITION",
                  "position": {
                    "x": 30000,
                    "y": 20000,
                    "z": 0
                  },
                  "layout": {
                    "layerId": 0,
                    "position": {
                      "x": 30000,
                      "y": 20000
                    },
                    "labelOffset": {
                      "x": 10,
                      "y": 10
                    }
                  },
                  "properties": [
                    {
                      "name": "isExampleProperty",
                      "value": true
                    }
                  ]
                },
                {
                  "name": "Point-C",
                  "vehicleOrientationAngle": "NaN",
                  "type": "HALT_POSITION",
                  "position": {
                    "x": 10000,
                    "y": 30000,
                    "z": 0
                  },
                  "layout": {
                    "layerId": 0,
                    "position": {
                      "x": 10000,
                      "y": 30000
                    },
                    "labelOffset": {
                      "x": 10,
                      "y": 10
                    }
                  }
                },
                {
                  "name": "Point-D",
                  "vehicleOrientationAngle": "NaN",
                  "type": "HALT_POSITION",
                  "position": {
                    "x": 25000,
                    "y": 30000,
                    "z": 0
                  },
                  "layout": {
                    "layerId": 0,
                    "position": {
                      "x": 25000,
                      "y": 30000
                    },
                    "labelOffset": {
                      "x": 10,
                      "y": 10
                    }
                  }
                }
              ]
            ]
          },
          "paths": {
            "type": "array",
            "description": "The plant model's paths.",
            "items": {
              "$ref": "#/components/schemas/PlantModelPath"
            },
            "examples": [
              [
                {
                  "name": "Path-AB",
                  "srcPointName": "Point-A",
                  "destPointName": "Point-B",
                  "maxVelocity": 2500,
                  "maxReverseVelocity": 2500,
                  "locked": false,
                  "layout": {
                    "connectionType": "DIRECT",
                    "layerId": 0
                  },
                  "properties": [
                    {
                      "name": "pathPropertyKey",
                      "value": "exampleValue"
                    }
                  ]
                },
                {
                  "name": "Path-BC",
                  "srcPointName": "Point-B",
                  "destPointName": "Point-C",
                  "maxVelocity": 2500,
                  "maxReverseVelocity": 2500,
                  "layout": {
                    "connectionType": "DIRECT",
                    "layerId": 0
                  }
                },
                {
                  "name": "Path-CA",
                  "srcPointName": "Point-C",
                  "destPointName": "Point-A",
                  "maxVelocity": 2500,
                  "maxReverseVelocity": 2500,
                  "layout": {
                    "connectionType": "DIRECT",
                    "layerId": 0
                  }
                },
                {
                  "name": "Path-CD",
                  "srcPointName": "Point-C",
                  "destPointName": "Point-D",
                  "maxVelocity": 1500,
                  "maxReverseVelocity": 1000,
                  "layout": {
                    "connectionType": "DIRECT",
                    "layerId": 0
                  }
                },
                {
                  "name": "Path-DA",
                  "srcPointName": "Point-D",
                  "destPointName": "Point-A",
                  "maxVelocity": 2500,
                  "maxReverseVelocity": 2500,
                  "layout": {
                    "connectionType": "DIRECT",
                    "layerId": 0
                  }
                },
                {
                  "name": "Path-DB",
                  "srcPointName": "Point-D",
                  "destPointName": "Point-B",
                  "maxVelocity": 2500,
                  "maxReverseVelocity": 2500,
                  "layout": {
                    "connectionType": "DIRECT",
                    "layerId": 0
                  }
                }
              ]
            ]
          },
          "locations": {
            "type": "array",
            "description": "The plant model's locations.",
            "items": {
              "$ref": "#/components/schemas/PlantModelLocation"
            },
            "examples": [
              [
                {
                  "name": "Storage 01",
                  "typeName": "Transfer-station",
                  "locked": false,
                  "position": {
                    "x": 15000,
                    "y": 10000,
                    "z": 0
                  },
                  "links": [
                    {
                      "pointName": "Point-A"
                    }
                  ],
                  "layout": {
                    "locationRepresentation": "LOAD_TRANSFER_ALT_1",
                    "layerId": 0,
                    "position": {
                      "x": 15000,
                      "y": 10000
                    },
                    "labelOffset": {
                      "x": 10,
                      "y": 10
                    }
                  }
                },
                {
                  "name": "Storage 02",
                  "typeName": "Transfer-station",
                  "locked": false,
                  "position": {
                    "x": 30000,
                    "y": 10000,
                    "z": 0
                  },
                  "links": [
                    {
                      "pointName": "Point-B"
                    }
                  ],
                  "layout": {
                    "layerId": 0,
                    "position": {
                      "x": 30000,
                      "y": 10000
                    },
                    "labelOffset": {
                      "x": 10,
                      "y": 10
                    }
                  }
                },
                {
                  "name": "Workshop",
                  "typeName": "Working-station",
                  "locked": false,
                  "position": {
                    "x": 35000,
                    "y": 30000,
                    "z": 0
                  },
                  "links": [
                    {
                      "pointName": "Point-D"
                    }
                  ],
                  "layout": {
                    "layerId": 0,
                    "position": {
                      "x": 35000,
                      "y": 30000
                    },
                    "labelOffset": {
                      "x": 10,
                      "y": 10
                    }
                  }
                },
                {
                  "name": "Loading Bay",
                  "typeName": "Transfer-station",
                  "locked": false,
                  "position": {
                    "x": 0,
                    "y": 30000,
                    "z": 0
                  },
                  "links": [
                    {
                      "pointName": "Point-C"
                    }
                  ],
                  "layout": {
                    "layerId": 0,
                    "position": {
                      "x": 0,
                      "y": 30000
                    },
                    "labelOffset": {
                      "x": 10,
                      "y": 10
                    }
                  }
                }
              ]
            ]
          }
        }
      },
      "Property": {
        "type": "object",
        "additionalProperties": false,
        "required": [
          "name",
          "value"
        ],
        "properties": {
          "name": {
            "type": "string",
            "description": "The property's key",
            "examples": [
              "key1"
            ]
          },
          "value": {
            "type": "string",
            "description": "The property's value",
            "examples": [
              "value1"
            ]
          }
        }
      },
      "PlantModelPath": {
        "title": "Path",
        "type": "object",
        "required": [
          "name",
          "srcPointName",
          "destPointName"
        ],
        "properties": {
          "name": {
            "type": "string",
            "description": "This path's name.",
            "examples": [
              "some path"
            ]
          },
          "srcPointName": {
            "type": "string",
            "description": "The point name this path originates in.",
            "examples": [
              "some point"
            ]
          },
          "destPointName": {
            "type": "string",
            "description": "The point name this path ends in.",
            "examples": [
              "another point"
            ]
          },
          "length": {
            "type": "integer",
            "format": "int64",
            "description": "This path's length (in mm).",
            "examples": [
              1300
            ]
          },
          "maxVelocity": {
            "type": "integer",
            "description": "The absolute maximum allowed forward velocity on this path (in mm/s). A value of 0 (default) means forward movement is not allowed on this path.",
            "examples": [
              1000
            ]
          },
          "maxReverseVelocity": {
            "type": "integer",
            "description": "The absolute maximum allowed reverse velocity on this path (in mm/s). A value of 0 (default) means reverse movement is not allowed on this path.",
            "examples": [
              300
            ]
          },
          "locked": {
            "type": "boolean",
            "description": "A flag for marking this path as locked (i.e. to prevent vehicles from using it)."
          },
          "vehicleEnvelopes": {
            "type": "array",
            "description": "A map of envelope keys to envelopes that vehicles traversing this path may occupy.",
            "items": {
              "$ref": "#/components/schemas/PlantModelEnvelope"
            }
          },
          "properties": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Property"
            }
          },
          "layout": {
            "type": "object",
            "description": "The information regarding the grahical representation of this path.",
            "properties": {
              "controlPoints": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/PlantModelCouple"
                }
              },
              "layerId": {
                "type": "integer",
                "examples": [
                  3
                ]
              },
              "connectionType": {
                "type": "string",
                "enum": [
                  "DIRECT",
                  "ELBOW",
                  "SLANTED",
                  "POLYPATH",
                  "BEZIER",
                  "BEZIER_3"
                ]
              }
            }
          },
          "peripheralOperations": {
            "type": "array",
            "description": "The peripheral operations to be performed when a vehicle travels along this path.",
            "items": {
              "type": "object",
              "properties": {
                "operation": {
                  "type": "string",
                  "examples": [
                    "some operation"
                  ]
                },
                "locationName": {
                  "type": "string",
                  "examples": [
                    "some location"
                  ]
                },
                "completionRequired": {
                  "type": "boolean"
                },
                "executionTrigger": {
                  "type": "string",
                  "enum": [
                    "AFTER_ALLOCATION",
                    "AFTER_MOVEMENT"
                  ]
                }
              }
            }
          }
        }
      },
      "VehicleStatusMessage": {
        "additionalProperties": false,
        "title": "VehicleStatusMessage",
        "allOf": [
          {
            "$ref": "#/components/schemas/StatusMessage"
          },
          {
            "properties": {
              "precisePosition": {
                "$ref": "#/components/schemas/PrecisePosition"
              },
              "sequenceNumber": {
                "type": "string"
              },
              "vehicleName": {
                "type": "string",
                "description": "The vehicle's name",
                "examples": [
                  "Vehicle-0001"
                ]
              },
              "transportOrderName": {
                "type": "string",
                "description": "The name of the transport order the vehicle currently processes",
                "examples": [
                  "TOrder-0001"
                ]
              },
              "position": {
                "type": "string",
                "description": "The name of the point the vehicle currently occupies",
                "examples": [
                  "Point-0001"
                ]
              },
              "paused": {
                "type": "boolean",
                "description": "Whether the vehicle is paused.",
                "examples": [
                  false
                ]
              },
              "type": {
                "type": "string",
                "default": "Vehicle",
                "enum": [
                  "Vehicle"
                ]
              },
              "state": {
                "type": "string",
                "description": "The vehicle's current state",
                "enum": [
                  "UNKNOWN",
                  "UNAVAILABLE",
                  "ERROR",
                  "IDLE",
                  "EXECUTING",
                  "CHARGING"
                ]
              },
              "procState": {
                "type": "string",
                "description": "The vehicle's current processing state",
                "enum": [
                  "UNAVAILABLE",
                  "IDLE",
                  "AWAITING_ORDER",
                  "PROCESSING_ORDER"
                ]
              },
              "allocatedResources": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/ResourceSet"
                },
                "description": "The resources already allocated by the vehicle.",
                "examples": [
                  [
                    [
                      "Path-0039--0040",
                      "Point-0040"
                    ],
                    [
                      "Path-0040--0041",
                      "Point-0041"
                    ]
                  ]
                ]
              },
              "claimedResources": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/ResourceSet"
                },
                "description": "The resources claimed - i.e. not yet allocated - for the vehicle's route.",
                "examples": [
                  [
                    [
                      "Path-0041--0042",
                      "Point-0042"
                    ],
                    [
                      "Path-0042--0043",
                      "Point-0043",
                      "Location-2345"
                    ]
                  ]
                ]
              }
            },
            "type": "object"
          }
        ]
      },
      "PlantModelLocation": {
        "title": "Location",
        "type": "object",
        "required": [
          "name",
          "typeName",
          "position"
        ],
        "properties": {
          "position": {
            "$ref": "#/components/schemas/PlantModelTriple"
          },
          "name": {
            "type": "string",
            "description": "This location's name.",
            "examples": [
              "some location"
            ]
          },
          "typeName": {
            "type": "string",
            "description": "The name of this location's type.",
            "examples": [
              "some location type"
            ]
          },
          "locked": {
            "type": "boolean",
            "description": "A flag for marking this location as locked (i.e. to prevent vehicles from using it)."
          },
          "properties": {
            "type": "array",
            "description": "This location's properties.",
            "items": {
              "$ref": "#/components/schemas/Property"
            }
          },
          "layout": {
            "type": "object",
            "description": "The information regarding the grahical representation of this location.",
            "properties": {
              "position": {
                "$ref": "#/components/schemas/PlantModelCouple"
              },
              "labelOffset": {
                "$ref": "#/components/schemas/PlantModelCouple"
              },
              "layerId": {
                "type": "integer",
                "examples": [
                  3
                ]
              },
              "locationRepresentation": {
                "type": "string",
                "enum": [
                  "NONE",
                  "DEFAULT",
                  "LOAD_TRANSFER_GENERIC",
                  "LOAD_TRANSFER_ALT_1",
                  "LOAD_TRANSFER_ALT_2",
                  "LOAD_TRANSFER_ALT_3",
                  "LOAD_TRANSFER_ALT_4",
                  "LOAD_TRANSFER_ALT_5",
                  "WORKING_GENERIC",
                  "WORKING_ALT_1",
                  "WORKING_ALT_2",
                  "RECHARGE_GENERIC",
                  "RECHARGE_ALT_1",
                  "RECHARGE_ALT_2"
                ]
              }
            }
          },
          "links": {
            "type": "array",
            "description": "The links attaching points to this location. This is a map of point names to allowed operations.",
            "items": {
              "type": "object",
              "properties": {
                "pointName": {
                  "type": "string",
                  "examples": [
                    "some point"
                  ]
                },
                "allowedOperations": {
                  "type": "array",
                  "items": {
                    "type": "string",
                    "examples": [
                      "some operation"
                    ]
                  }
                }
              }
            }
          }
        }
      },
      "OrderStatusMessage": {
        "title": "OrderStatusMessage",
        "additionalProperties": false,
        "allOf": [
          {
            "$ref": "#/components/schemas/StatusMessage"
          },
          {
            "properties": {
              "sequenceNumber": {
                "type": "string"
              },
              "orderName": {
                "type": "string",
                "description": "The (optional) transport order name",
                "examples": [
                  "TOrder-0001"
                ]
              },
              "processingVehicleName": {
                "type": "string",
                "description": "The processing vehicle's name",
                "examples": [
                  "Vehicle-0001"
                ]
              },
              "destinations": {
                "type": "array",
                "minItems": 1,
                "maxItems": 2147483647,
                "items": {
                  "$ref": "#/components/schemas/DestinationState"
                },
                "description": "The transport order's destinations"
              },
              "properties": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Property"
                },
                "description": "The transport order's properties"
              },
              "type": {
                "type": "string",
                "default": "TransportOrder",
                "enum": [
                  "TransportOrder"
                ]
              },
              "orderState": {
                "type": "string",
                "description": "The transport order's current state",
                "enum": [
                  "RAW",
                  "ACTIVE",
                  "DISPATCHABLE",
                  "BEING_PROCESSED",
                  "WITHDRAWN",
                  "FINISHED",
                  "FAILED",
                  "UNROUTABLE"
                ]
              }
            },
            "type": "object"
          }
        ]
      },
      "VehicleState": {
        "title": "Vehicle State",
        "type": "object",
        "additionalProperties": false,
        "required": [
          "length",
          "energyLevelGood",
          "energyLevelCritical",
          "energyLevel",
          "allocatedResources",
          "claimedResources"
        ],
        "properties": {
          "precisePosition": {
            "$ref": "#/components/schemas/PrecisePosition"
          },
          "name": {
            "type": "string",
            "description": "The name of the vehicle",
            "examples": [
              "Vehicle-0001"
            ]
          },
          "length": {
            "type": "integer",
            "description": "The vehicle's length (in mm).",
            "examples": [
              1000
            ]
          },
          "energyLevelGood": {
            "type": "integer",
            "description": "The value (in %) at/above which the vehicle's energy level is considered 'good'.",
            "examples": [
              90
            ]
          },
          "energyLevelCritical": {
            "type": "integer",
            "description": "The value (in %) at/below which the vehicle's energy level is considered 'critical'.",
            "examples": [
              30
            ]
          },
          "energyLevel": {
            "type": "integer",
            "description": "The vehicle's remaining energy (in %).",
            "examples": [
              60
            ]
          },
          "paused": {
            "type": "boolean",
            "description": "Whether the vehicle is paused.",
            "examples": [
              false
            ]
          },
          "transportOrder": {
            "type": "string",
            "description": "The name of the transport order the vehicle is currently processing.",
            "examples": [
              "TOrder-01"
            ]
          },
          "currentPosition": {
            "type": "string",
            "description": "The name of the point which the vehicle currently occupies.",
            "examples": [
              "Point-0001"
            ]
          },
          "envelopeKey": {
            "type": "string",
            "description": "The envelope key for this vehicle.",
            "examples": [
              "envelopeType-01"
            ]
          },
          "properties": {
            "type": "object",
            "description": "A set of properties (key-value pairs) associated with this object.",
            "additionalProperties": {
              "type": "string"
            },
            "properties": {}
          },
          "integrationLevel": {
            "type": "string",
            "description": "The vehicle's integration level.",
            "enum": [
              "TO_BE_IGNORED",
              "TO_BE_NOTICED",
              "TO_BE_RESPECTED",
              "TO_BE_UTILIZED"
            ]
          },
          "procState": {
            "type": "string",
            "description": "The vehicle's current processing state.",
            "enum": [
              "UNAVAILABLE",
              "IDLE",
              "AWAITING_ORDER",
              "PROCESSING_ORDER"
            ]
          },
          "state": {
            "type": "string",
            "description": "The vehicle's current state.",
            "enum": [
              "UNKNOWN",
              "UNAVAILABLE",
              "ERROR",
              "IDLE",
              "EXECUTING",
              "CHARGING"
            ]
          },
          "allowedOrderTypes": {
            "type": "array",
            "items": {
              "type": "string",
              "description": "The allowed order types for this vehicle."
            },
            "examples": [
              [
                "OrderType001",
                "OrderType002"
              ]
            ]
          },
          "allocatedResources": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ResourceSet"
            },
            "description": "The resources already allocated by the vehicle.",
            "examples": [
              [
                [
                  "Path-0039--0040",
                  "Point-0040"
                ],
                [
                  "Path-0040--0041",
                  "Point-0041"
                ]
              ]
            ]
          },
          "claimedResources": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ResourceSet"
            },
            "description": "The resources claimed - i.e. not yet allocated - for the vehicle's route.",
            "examples": [
              [
                [
                  "Path-0041--0042",
                  "Point-0042"
                ],
                [
                  "Path-0042--0043",
                  "Point-0043",
                  "Location-2345"
                ]
              ]
            ]
          }
        }
      },
      "RoutesResponse": {
        "title": "Computed routes for different destination points.",
        "type": "object",
        "properties": {
          "routes": {
            "type": "array",
            "description": "The list of computed routes.",
            "items": {
              "$ref": "#/components/schemas/Route"
            }
          }
        },
        "examples": [
          {
            "routes": [
              {
                "destinationPoint": "Point-C",
                "costs": 77644,
                "steps": [
                  {
                    "path": "Point-A --- Point-B",
                    "sourcePoint": "Point-A",
                    "destinationPoint": "Point-B",
                    "vehicleOrientation": "FORWARD"
                  },
                  {
                    "path": "Point-B --- Point-C",
                    "sourcePoint": "Point-B",
                    "destinationPoint": "Point-C",
                    "vehicleOrientation": "FORWARD"
                  }
                ]
              },
              {
                "destinationPoint": "Point-D",
                "costs": -1,
                "steps": null
              },
              {
                "destinationPoint": "Point-E",
                "costs": 67934,
                "steps": [
                  {
                    "path": "Point-A --- Point-D",
                    "sourcePoint": "Point-A",
                    "destinationPoint": "Point-D",
                    "vehicleOrientation": "FORWARD"
                  },
                  {
                    "path": "Point-D --- Point-E",
                    "sourcePoint": "Point-D",
                    "destinationPoint": "Point-E",
                    "vehicleOrientation": "BACKWARD"
                  }
                ]
              }
            ]
          }
        ]
      },
      "PlantModelLocationType": {
        "title": "Location Type",
        "type": "object",
        "required": [
          "name"
        ],
        "properties": {
          "name": {
            "type": "string",
            "description": "This location type's name.",
            "examples": [
              "some location type"
            ]
          },
          "properties": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Property"
            },
            "description": "This location type's properties."
          },
          "allowedOperations": {
            "type": "array",
            "description": "The allowed operations for this location type.",
            "items": {
              "type": "string",
              "examples": [
                [
                  "some operation",
                  "another operation"
                ]
              ]
            }
          },
          "allowedPeripheralOperations": {
            "type": "array",
            "description": "The allowed peripheral operations for this location type.",
            "items": {
              "type": "string",
              "examples": [
                [
                  "some peripheral operation",
                  "another peripheral operation"
                ]
              ]
            }
          },
          "layout": {
            "type": "object",
            "description": "The information regarding the grahical representation of this location type.",
            "properties": {
              "locationRepresentation": {
                "type": "string",
                "enum": [
                  "NONE",
                  "DEFAULT",
                  "LOAD_TRANSFER_GENERIC",
                  "LOAD_TRANSFER_ALT_1",
                  "LOAD_TRANSFER_ALT_2",
                  "LOAD_TRANSFER_ALT_3",
                  "LOAD_TRANSFER_ALT_4",
                  "LOAD_TRANSFER_ALT_5",
                  "WORKING_GENERIC",
                  "WORKING_ALT_1",
                  "WORKING_ALT_2",
                  "RECHARGE_GENERIC",
                  "RECHARGE_ALT_1",
                  "RECHARGE_ALT_2"
                ]
              }
            }
          }
        }
      },
      "PlantModelPoint": {
        "title": "Point",
        "type": "object",
        "required": [
          "name"
        ],
        "properties": {
          "position": {
            "$ref": "#/components/schemas/PlantModelTriple"
          },
          "name": {
            "type": "string",
            "description": "This point's name.",
            "examples": [
              "some point"
            ]
          },
          "vehicleEnvelopes": {
            "type": "array",
            "description": "A map of envelope keys to envelopes that vehicles located at this point may occupy.",
            "items": {
              "$ref": "#/components/schemas/PlantModelEnvelope"
            }
          },
          "properties": {
            "type": "array",
            "description": "This point's properties.",
            "items": {
              "$ref": "#/components/schemas/Property"
            }
          },
          "type": {
            "type": "string",
            "description": "This point's type.",
            "enum": [
              "REPORT_POSITION",
              "HALT_POSITION",
              "PARK_POSITION"
            ]
          },
          "vehicleOrientationAngle": {
            "description": "The vehicle's (assumed) orientation angle (-360..360) when it is at this position. May be a string (\"NaN\") if an orientation angle is not defined for this point.",
            "oneOf": [
              {
                "type": "string"
              },
              {
                "type": "number",
                "format": "double"
              }
            ],
            "examples": [
              73.3
            ]
          },
          "layout": {
            "type": "object",
            "description": "Describes the graphical representation of this point.",
            "properties": {
              "position": {
                "$ref": "#/components/schemas/PlantModelCouple"
              },
              "labelOffset": {
                "$ref": "#/components/schemas/PlantModelCouple"
              },
              "layerId": {
                "type": "integer",
                "examples": [
                  3
                ]
              }
            }
          }
        }
      },
      "PeripheralJobStatusMessage": {
        "title": "PeripheralJobStatusMessage",
        "additionalProperties": false,
        "allOf": [
          {
            "$ref": "#/components/schemas/StatusMessage"
          },
          {
            "$ref": "#/components/schemas/PeripheralJobState"
          },
          {
            "properties": {
              "sequenceNumber": {
                "type": "string"
              },
              "type": {
                "type": "string",
                "default": "PeripheralJob",
                "enum": [
                  "PeripheralJob"
                ]
              }
            },
            "type": "object"
          }
        ]
      },
      "PlantModelEnvelope": {
        "title": "Envelope",
        "type": "object",
        "properties": {
          "envelopeKey": {
            "type": "string",
            "description": "This envelope's key.",
            "examples": [
              "envelopeType-01"
            ]
          },
          "vertices": {
            "type": "array",
            "description": "The sequence of vertices this envelope consists of.",
            "items": {
              "$ref": "#/components/schemas/PlantModelCouple"
            },
            "examples": [
              [
                {
                  "x": 1500,
                  "y": 1750
                },
                {
                  "x": 1600,
                  "y": 1820
                },
                {
                  "x": 1700,
                  "y": 1890
                }
              ]
            ]
          }
        }
      },
      "PlantModelBlock": {
        "title": "Block",
        "type": "object",
        "required": [
          "name"
        ],
        "properties": {
          "name": {
            "type": "string",
            "description": "This block's name.",
            "examples": [
              "some block"
            ]
          },
          "properties": {
            "type": "array",
            "description": "This block's properties.",
            "items": {
              "$ref": "#/components/schemas/Property"
            }
          },
          "type": {
            "type": "string",
            "description": "This block's type.",
            "enum": [
              "SINGLE_VEHICLE_ONLY",
              "SAME_DIRECTION_ONLY"
            ]
          },
          "memberNames": {
            "type": "array",
            "description": "This block's member names.",
            "items": {
              "type": "string"
            },
            "examples": [
              [
                "Path-AB",
                "Path-BC"
              ]
            ]
          },
          "layout": {
            "type": "object",
            "description": "The information regarding the grahical representation of this block.",
            "properties": {
              "color": {
                "type": "string",
                "pattern": "^#([A-Fa-f0-9]{6})$",
                "examples": [
                  "#FF0000"
                ]
              }
            }
          }
        }
      },
      "OrderSequenceState": {
        "title": "Order Sequence State",
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "name": {
            "type": "string",
            "description": "The name of the order sequence.",
            "examples": [
              "Sequence-001"
            ]
          },
          "type": {
            "type": "string",
            "description": "The type of the order sequence.",
            "examples": [
              "Park"
            ]
          },
          "finishedIndex": {
            "type": "integer",
            "description": "The index of the order that was last finished in the sequence. -1 if none was finished yet.",
            "examples": [
              3
            ]
          },
          "complete": {
            "type": "boolean",
            "description": "Indicates whether this order sequence is complete and will not be extended by more orders.",
            "examples": [
              false
            ]
          },
          "finished": {
            "type": "boolean",
            "description": "Indicates whether this order sequence has been processed completely.",
            "examples": [
              false
            ]
          },
          "failureFatal": {
            "type": "boolean",
            "description": "Indicates whether the failure of one order in this sequence is fatal to all subsequent orders.",
            "examples": [
              false
            ]
          },
          "intendedVehicle": {
            "type": "string",
            "description": "The name of the vehicle that is intended to process the order sequence. If this sequence is free to be processed by any vehicle, this is `null`.",
            "examples": [
              "Vehicle-0001"
            ]
          },
          "processingVehicle": {
            "type": "string",
            "description": "The vehicle processing this order sequence, or `null`, if no vehicle has been assigned to it, yet.",
            "examples": [
              "Vehicle-0002"
            ]
          },
          "properties": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Property"
            },
            "description": "The order sequences properties"
          },
          "orders": {
            "type": "array",
            "items": {
              "type": "string",
              "description": "The sequence of orders of the order sequence."
            },
            "examples": [
              [
                "some-order",
                "another-order",
                "order-3"
              ]
            ]
          }
        }
      },
      "TransportOrder": {
        "title": "Transport Order",
        "type": "object",
        "additionalProperties": false,
        "required": [
          "destinations"
        ],
        "properties": {
          "incompleteName": {
            "type": "boolean",
            "description": "Whether the name of the transport order is considered to be incomplete. If set, the kernel will complete the name according to its configuration, e.g. by appending a suffix to it. It is recommended to set this, as names generated by the kernel can be guaranteed to be unique, while clients typically cannot guarantee this.",
            "default": false
          },
          "dispensable": {
            "type": "boolean",
            "description": "Whether this order is dispensable (may be withdrawn automatically).",
            "default": false
          },
          "intendedVehicle": {
            "type": "string",
            "description": "The (optional) intended vehicle of the transport order",
            "examples": [
              "Vehicle-01"
            ]
          },
          "peripheralReservationToken": {
            "type": "string",
            "description": "An (optional) token for reserving peripheral devices while processing this transport order.",
            "examples": [
              "Token-001"
            ]
          },
          "wrappingSequence": {
            "type": "string",
            "description": "The order sequence this transport order belongs to. May be `null` in case this order isn't part of any sequence.",
            "examples": [
              "OrderSequence-01"
            ]
          },
          "type": {
            "type": "string",
            "description": "The (optional) type of the transport order",
            "examples": [
              "Park"
            ]
          },
          "destinations": {
            "type": "array",
            "minItems": 1,
            "maxItems": 2147483647,
            "items": {
              "$ref": "#/components/schemas/DestinationOrder"
            },
            "description": "The destinations"
          },
          "properties": {
            "type": "array",
            "minItems": 0,
            "maxItems": 2147483647,
            "items": {
              "$ref": "#/components/schemas/Property_"
            },
            "description": "The transport order's properties"
          },
          "deadline": {
            "type": "string",
            "format": "date-time",
            "description": "The (optional) deadline of the transport order",
            "examples": [
              {}
            ]
          },
          "dependencies": {
            "type": "array",
            "minItems": 0,
            "maxItems": 2147483647,
            "description": "The transport order's dependencies",
            "items": {
              "type": "string",
              "examples": [
                "TOrder-001"
              ]
            }
          }
        }
      },
      "TransportOrderState": {
        "title": "Transport Order State",
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "dispensable": {
            "type": "boolean",
            "description": "Whether this order is dispensable (may be withdrawn automatically).",
            "examples": [
              false
            ]
          },
          "name": {
            "type": "string",
            "description": "The name of the transport order.",
            "examples": [
              "TOrder-01"
            ]
          },
          "type": {
            "type": "string",
            "description": "The type of the transport order.",
            "examples": [
              "Park"
            ]
          },
          "intendedVehicle": {
            "type": "string",
            "description": "The name of the vehicle that is intended to process the transport order.",
            "examples": [
              "Vehicle-0001"
            ]
          },
          "processingVehicle": {
            "type": "string",
            "description": "The name of the vehicle currently processing the transport order.",
            "examples": [
              "Vehicle-0002"
            ]
          },
          "peripheralReservationToken": {
            "type": "string",
            "description": "An (optional) token for reserving peripheral devices while processing this transport order.",
            "examples": [
              "Token-001"
            ]
          },
          "wrappingSequence": {
            "type": "string",
            "description": "The order sequence this transport order belongs to. May be `null` in case this order isn't part of any sequence.",
            "examples": [
              "OrderSequence-01"
            ]
          },
          "destinations": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/DestinationState"
            },
            "description": "The sequence of destinations of the transport order."
          },
          "state": {
            "type": "string",
            "description": "The transport order's current state.",
            "enum": [
              "RAW",
              "ACTIVE",
              "DISPATCHABLE",
              "BEING_PROCESSED",
              "WITHDRAWN",
              "FINISHED",
              "FAILED",
              "UNROUTABLE"
            ]
          },
          "createTime": {
            "type": "string",
            "format": "date-time"
          }
        }
      },
      "PlantModelVisualLayout": {
        "title": "Visual Layout",
        "type": "object",
        "required": [
          "name"
        ],
        "properties": {
          "name": {
            "type": "string",
            "description": "This visual layout's name.",
            "examples": [
              "some visual layout"
            ]
          },
          "scaleX": {
            "type": "number",
            "description": "This layout's scale on the X axis (in mm/pixel).",
            "examples": [
              50
            ]
          },
          "scaleY": {
            "type": "number",
            "description": "This layout's scale on the Y axis (in mm/pixel).",
            "examples": [
              50
            ]
          },
          "layers": {
            "type": "array",
            "description": "This layout's layers.",
            "items": {
              "$ref": "#/components/schemas/PlantModelLayer"
            }
          },
          "layerGroups": {
            "type": "array",
            "description": "The layout's layer groups.",
            "items": {
              "$ref": "#/components/schemas/PlantModelLayerGroup"
            }
          },
          "properties": {
            "type": "array",
            "description": "This visual layout's properties.",
            "items": {
              "type": "string"
            }
          }
        }
      },
      "PlantModelVehicle": {
        "title": "Vehicle",
        "type": "object",
        "required": [
          "name"
        ],
        "properties": {
          "name": {
            "type": "string",
            "description": "This vehicle's name.",
            "examples": [
              "some vehicle"
            ]
          },
          "length": {
            "type": "integer",
            "description": "The vehicle's length (in mm).",
            "examples": [
              1000
            ]
          },
          "energyLevelCritical": {
            "type": "integer",
            "description": "The energy level value (in %) at/below which the vehicle should be recharged.",
            "examples": [
              15
            ]
          },
          "energyLevelGood": {
            "type": "integer",
            "description": "The energy level value (in %) at/above which the vehicle can be dispatched again when charging.",
            "examples": [
              60
            ]
          },
          "energyLevelFullyRecharged": {
            "type": "integer",
            "description": "The energy level value (in %) at/above which the vehicle is considered fully recharged.",
            "examples": [
              90
            ]
          },
          "energyLevelSufficientlyRecharged": {
            "type": "integer",
            "description": "The energy level value (in %) at/above which the vehicle is considered sufficiently recharged.",
            "examples": [
              50
            ]
          },
          "maxVelocity": {
            "type": "integer",
            "description": "The vehicle's maximum velocity (in mm/s).",
            "examples": [
              2000
            ]
          },
          "maxReverseVelocity": {
            "type": "integer",
            "description": "The vehicle's maximum reverse velocity (in mm/s).",
            "examples": [
              733
            ]
          },
          "properties": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Property_"
            },
            "description": "This vehicle's properties."
          },
          "layout": {
            "type": "object",
            "description": "The information regarding the grahical representation of this vehicle.",
            "properties": {
              "routeColor": {
                "type": "string",
                "pattern": "^#([A-Fa-f0-9]{6})$",
                "examples": [
                  "#00FF00"
                ]
              }
            }
          }
        }
      },
      "StatusMessage": {
        "title": "AbstractStatusMessage",
        "type": "object",
        "discriminator": {
          "propertyName": "type"
        },
        "required": [
          "type",
          "sequenceNumber",
          "creationTimeStamp"
        ],
        "properties": {
          "sequenceNumber": {
            "type": "integer",
            "description": "The (unique) sequence number of this status message",
            "examples": [
              123
            ]
          },
          "type": {
            "type": "string",
            "enum": [
              "TransportOrder",
              "Vehicle",
              "PeripheralJob"
            ]
          },
          "creationTimeStamp": {
            "type": "string",
            "format": "date-time",
            "description": "When this status message was created",
            "examples": [
              {}
            ]
          }
        }
      },
      "StatusMessageList": {
        "title": "Status Message List",
        "type": "object",
        "additionalProperties": false,
        "required": [
          "timeStamp",
          "statusMessages"
        ],
        "properties": {
          "timeStamp": {
            "type": "string",
            "format": "date-time",
            "description": "The point of time at which this data structure was created"
          },
          "statusMessages": {
            "type": "array",
            "description": "The status messages",
            "items": {
              "oneOf": [
                {
                  "$ref": "#/components/schemas/OrderStatusMessage"
                },
                {
                  "$ref": "#/components/schemas/VehicleStatusMessage"
                },
                {
                  "$ref": "#/components/schemas/PeripheralJobStatusMessage"
                }
              ]
            }
          }
        }
      },
      "PeripheralJobState": {
        "title": "Peripheral Job State",
        "type": "object",
        "additionalProperties": false,
        "required": [
          "name",
          "reservationToken",
          "relatedVehicle",
          "relatedTransportOrder",
          "peripheralOperation",
          "state",
          "creationTime",
          "finishedTime"
        ],
        "properties": {
          "peripheralOperation": {
            "$ref": "#/components/schemas/PeripheralOperation"
          },
          "name": {
            "type": "string",
            "description": "The name of the peripheral job.",
            "examples": [
              "PJob-01"
            ]
          },
          "reservationToken": {
            "type": "string",
            "description": "A token that may be used to reserve a peripheral device. A peripheral device that is reserved for a specific token can only process jobs which match that reservation token.",
            "examples": [
              "Vehicle-0001"
            ]
          },
          "relatedVehicle": {
            "type": "string",
            "description": "The name of the vehicle for which the peripheral job was created. May be `null`, if the job wasn't created in the context of a transport order being processed by a vehicle.",
            "examples": [
              "Vehicle-0001"
            ]
          },
          "relatedTransportOrder": {
            "type": "string",
            "description": "The name of the transport order for which the peripheral job was created. May be `null`, if the job wasn't created in the context of a transport order being processed by a vehicle.",
            "examples": [
              "TOrder-01"
            ]
          },
          "creationTime": {
            "type": "string",
            "format": "date-time",
            "description": "The point of time at which this peripheral job was created (expressed according to ISO 8601).",
            "examples": [
              "2022-01-01T12:00:00Z"
            ]
          },
          "finishedTime": {
            "type": "string",
            "format": "date-time",
            "description": "The point of time at which processing of this peripheral job was finished (expressed according to ISO 8601).",
            "examples": [
              "2022-01-01T12:00:00Z"
            ]
          },
          "properties": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Property"
            },
            "description": "The peripheral job's properties."
          },
          "state": {
            "type": "string",
            "description": "The peripheral job's current state.",
            "enum": [
              "TO_BE_PROCESSED",
              "BEING_PROCESSED",
              "FINISHED",
              "FAILED"
            ]
          }
        }
      },
      "AttachmentInformation": {
        "title": "Attachment Information",
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "vehicleName": {
            "type": "string",
            "description": "The name of the vehicle.",
            "examples": [
              "Vehicle-0001"
            ]
          },
          "attachedCommAdapter": {
            "type": "string",
            "description": "The description class name of the vehicle driver currently attached to this vehicle.",
            "examples": [
              "org.opentcs.someVehicle.driver001"
            ]
          },
          "availableCommAdapters": {
            "type": "array",
            "description": "The list of drivers (as names of description classes) available for this vehicle.",
            "items": {
              "type": "string"
            },
            "examples": [
              [
                "org.opentcs.someVehicle.driver001",
                "org.opentcs.someVehicle.driver002"
              ]
            ]
          }
        }
      },
      "RoutesRequest": {
        "title": "Requested routes",
        "type": "object",
        "required": [
          "destinationPoints"
        ],
        "properties": {
          "sourcePoint": {
            "type": "string",
            "description": "The (optional) starting point for route computation. If `null` or not set, the vehicle's current position will be used.",
            "examples": [
              "Point-A"
            ]
          },
          "destinationPoints": {
            "type": "array",
            "description": "The destination point for each route to be computed.",
            "examples": [
              [
                "Point-C",
                "Point-D",
                "Point-E"
              ]
            ],
            "items": {
              "type": "string"
            }
          }
        }
      },
      "Step": {
        "title": "Single step of a route",
        "type": "object",
        "required": [
          "destinationPoint",
          "vehicleOrientation"
        ],
        "properties": {
          "path": {
            "type": "string",
            "description": "The path to travel for this step.",
            "examples": [
              "Point-A --- Point-B"
            ]
          },
          "sourcePoint": {
            "type": "string",
            "description": "The source point for this step.",
            "examples": [
              "Point-A"
            ]
          },
          "destinationPoint": {
            "type": "string",
            "description": "The destination point for this step.",
            "examples": [
              "Point-B"
            ]
          },
          "vehicleOrientation": {
            "type": "string",
            "default": "UNDEFINED",
            "enum": [
              "FORWARD",
              "BACKWARD",
              "UNDEFINED"
            ]
          }
        }
      },
      "PlantModelLayer": {
        "title": "Layer",
        "type": "object",
        "required": [
          "id",
          "ordinal",
          "visible",
          "name",
          "groupId"
        ],
        "properties": {
          "id": {
            "type": "integer",
            "description": "The unique ID of this layer.",
            "examples": [
              0
            ]
          },
          "ordinal": {
            "type": "integer",
            "description": "The ordinal of this layer. Layers with a higher ordinal are positioned above layers with a lower ordinal.",
            "examples": [
              0
            ]
          },
          "visible": {
            "type": "boolean",
            "description": "Whether this layer is visible or not."
          },
          "name": {
            "type": "string",
            "description": "The name of this layer.",
            "examples": [
              "some layer"
            ]
          },
          "groupId": {
            "type": "integer",
            "description": "The ID of the layer group this layer is assigned to.",
            "examples": [
              0
            ]
          }
        }
      },
      "PeripheralOperation": {
        "title": "Peripheral Operation",
        "description": "An operation that is to be executed by a peripheral device.",
        "type": "object",
        "additionalProperties": false,
        "required": [
          "operation",
          "locationName"
        ],
        "properties": {
          "operation": {
            "type": "string",
            "description": "The operation to be performed by the peripheral device.",
            "examples": [
              "Open door"
            ]
          },
          "locationName": {
            "type": "string",
            "description": "The name of the location the peripheral device is associated with.",
            "examples": [
              "Loading Bay"
            ]
          },
          "completionRequired": {
            "type": "boolean",
            "description": "Whether the completion of this operation is required to allow a vehicle to continue driving.",
            "default": false
          },
          "executionTrigger": {
            "type": "string",
            "description": "The moment at which this operation is to be performed.",
            "default": "AFTER_ALLOCATION",
            "enum": [
              "AFTER_ALLOCATION",
              "AFTER_MOVEMENT"
            ]
          }
        }
      },
      "PeripheralJob": {
        "title": "Peripheral Job",
        "type": "object",
        "additionalProperties": false,
        "required": [
          "reservationToken",
          "peripheralOperation"
        ],
        "properties": {
          "peripheralOperation": {
            "$ref": "#/components/schemas/PeripheralOperation"
          },
          "incompleteName": {
            "type": "boolean",
            "description": "Whether the name of the peripheral job is considered to be incomplete. If set, the kernel will complete the name according to its configuration, e.g. by appending a suffix to it. It is recommended to set this, as names generated by the kernel can be guaranteed to be unique, while clients typically cannot guarantee this.",
            "default": false
          },
          "reservationToken": {
            "type": "string",
            "description": "The token that may be used to reserve a peripheral device. A peripheral device that is reserved for a specific token can only process jobs which match that reservation token. The reservation token may not be empty."
          },
          "relatedVehicle": {
            "type": "string",
            "description": "The name of the vehicle for which the peripheral job was created. May be `null`, if the job wasn't created in the context of a transport order being processed by a vehicle.",
            "default": null
          },
          "relatedTransportOrder": {
            "type": "string",
            "description": "The name of the transport order for which the peripheral job was created. May be `null`, if the job wasn't created in the context of a transport order being processed by a vehicle.",
            "default": null
          },
          "properties": {
            "type": "array",
            "minItems": 0,
            "maxItems": 2147483647,
            "items": {
              "$ref": "#/components/schemas/Property"
            },
            "description": "The peripheral jobs's properties."
          }
        }
      },
      "OrderSequence": {
        "title": "Order Sequence",
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "incompleteName": {
            "type": "boolean",
            "description": "Indicates whether the name is incomplete and requires to be completed when creating the actual order sequence. (How exactly this is done is decided by the kernel.)",
            "examples": [
              false
            ]
          },
          "type": {
            "type": "string",
            "description": "The type of the order sequence.",
            "examples": [
              "Park"
            ]
          },
          "intendedVehicle": {
            "type": "string",
            "description": "The name of the vehicle that is intended to process the order sequence. If this sequence is free to be processed by any vehicle, this is `null`.",
            "examples": [
              "Vehicle-01"
            ]
          },
          "failureFatal": {
            "type": "boolean",
            "description": "Indicates whether the failure of one order in this sequence is fatal to all subsequent orders.",
            "examples": [
              false
            ]
          },
          "properties": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Property_"
            },
            "description": "The order sequence's properties"
          }
        }
      },
      "AllowedOrderTypes": {
        "title": "Allowed Order Types",
        "type": "object",
        "required": [
          "orderTypes"
        ],
        "properties": {
          "orderTypes": {
            "type": "array",
            "items": {
              "type": "string",
              "description": "The names of the allowed order types."
            },
            "examples": [
              [
                "Park",
                "Load cargo",
                "Unload cargo"
              ]
            ]
          }
        }
      },
      "DestinationState": {
        "type": "object",
        "additionalProperties": false,
        "required": [
          "locationName",
          "operation",
          "state"
        ],
        "properties": {
          "locationName": {
            "type": "string",
            "description": "The name of the destination location",
            "examples": [
              "Storage 01"
            ]
          },
          "operation": {
            "type": "string",
            "description": "The destination operation",
            "examples": [
              "Store"
            ]
          },
          "properties": {
            "type": "array",
            "minItems": 0,
            "maxItems": 2147483647,
            "items": {
              "$ref": "#/components/schemas/Property_"
            },
            "description": "The drive order's properties"
          },
          "state": {
            "type": "string",
            "description": "The drive order's state",
            "enum": [
              "PRISTINE",
              "ACTIVE",
              "TRAVELLING",
              "OPERATING",
              "FINISHED",
              "FAILED"
            ]
          }
        }
      },
      "Route": {
        "title": "Route",
        "type": "object",
        "required": [
          "destinationPoint",
          "costs",
          "steps"
        ],
        "properties": {
          "destinationPoint": {
            "type": "string",
            "description": "The computed route's destination point.",
            "examples": [
              "Point-A"
            ]
          },
          "costs": {
            "type": "integer",
            "format": "int64",
            "description": "The costs for the computed route, or `-1`, if no route could be computed.",
            "examples": [
              33475
            ]
          },
          "steps": {
            "type": "array",
            "description": "An array containing the computed route's steps, or `null`, if no route could be computed.",
            "items": {
              "$ref": "#/components/schemas/Step"
            }
          }
        }
      },
      "PlantModelLayerGroup": {
        "title": "Layer Group",
        "type": "object",
        "required": [
          "id",
          "name",
          "visible"
        ],
        "properties": {
          "id": {
            "type": "integer",
            "description": "The unique ID of this layer group.",
            "examples": [
              0
            ]
          },
          "name": {
            "type": "string",
            "description": "The name of this layer group.",
            "examples": [
              "some layer"
            ]
          },
          "visible": {
            "description": "Whether this layer group is visible or not.",
            "type": "boolean"
          }
        }
      },
      "PlantModelTriple": {
        "title": "Triple",
        "type": "object",
        "required": [
          "x",
          "y",
          "z"
        ],
        "properties": {
          "x": {
            "type": "integer",
            "format": "int64",
            "description": "The Triple's x value.",
            "examples": [
              1500
            ]
          },
          "y": {
            "type": "integer",
            "format": "int64",
            "description": "The Triple's y value.",
            "examples": [
              2000
            ]
          },
          "z": {
            "type": "integer",
            "format": "int64",
            "description": "The Triple's z value.",
            "examples": [
              500
            ]
          }
        }
      },
      "PrecisePosition": {
        "type": "object",
        "additionalProperties": false,
        "required": [
          "x",
          "y",
          "z"
        ],
        "properties": {
          "x": {
            "type": "integer",
            "description": "The position's X coordinate",
            "examples": [
              60
            ]
          },
          "y": {
            "type": "integer",
            "description": "The position's Y coordinate",
            "examples": [
              40
            ]
          },
          "z": {
            "type": "integer",
            "description": "The position's Z coordinate",
            "examples": [
              0
            ]
          }
        }
      },
      "DestinationOrder": {
        "type": "object",
        "additionalProperties": false,
        "required": [
          "locationName",
          "operation"
        ],
        "properties": {
          "locationName": {
            "type": "string",
            "description": "The name of the destination location",
            "examples": [
              "Storage 01"
            ]
          },
          "operation": {
            "type": "string",
            "description": "The destination operation",
            "examples": [
              "Load cargo"
            ]
          },
          "properties": {
            "type": "array",
            "minItems": 0,
            "maxItems": 2147483647,
            "items": {
              "$ref": "#/components/schemas/Property"
            },
            "description": "The drive order's properties"
          }
        }
      },
      "PlantModelCouple": {
        "title": "Couple",
        "type": "object",
        "required": [
          "x",
          "y"
        ],
        "properties": {
          "x": {
            "type": "integer",
            "format": "int64",
            "description": "The Couple's x value.",
            "examples": [
              1500
            ]
          },
          "y": {
            "type": "integer",
            "format": "int64",
            "description": "The Couple's y value.",
            "examples": [
              2000
            ]
          }
        }
      },
      "PeripheralAttachmentInformation": {
        "title": "Attachment Information",
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "locationReference": {
            "type": "string",
            "description": "The name of the location.",
            "examples": [
              "Fire door 001"
            ]
          },
          "attachedCommAdapter": {
            "type": "string",
            "description": "The description class name of the peripheral driver currently attached to this location.",
            "examples": [
              "org.opentcs.somePeripheral.driver001"
            ]
          }
        }
      },
      "ResourceSet": {
        "type": "array",
        "items": {
          "type": "string",
          "description": "Name of the resource"
        },
        "examples": [
          [
            "Point-0042",
            "Path-0041--0042"
          ]
        ]
      },
      "Tag": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int64",
            "minimum": 1,
            "description": "标签ID编号"
          },
          "name": {
            "type": "string",
            "description": "标签名称"
          }
        },
        "xml": {
          "name": "Tag"
        }
      },
      "Category": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int64",
            "minimum": 1,
            "description": "分组ID编号"
          },
          "name": {
            "type": "string",
            "description": "分组名称"
          }
        },
        "xml": {
          "name": "Category"
        }
      },
      "Pet": {
        "required": [
          "name",
          "photoUrls",
          "id",
          "category",
          "tags",
          "status"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int64",
            "minimum": 1,
            "description": "宠物ID编号"
          },
          "category": {
            "$ref": "#/components/schemas/Category",
            "description": "分组"
          },
          "name": {
            "type": "string",
            "description": "名称",
            "examples": [
              "doggie"
            ]
          },
          "photoUrls": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "照片URL"
          },
          "tags": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Tag"
            },
            "description": "标签"
          },
          "status": {
            "type": "string",
            "description": "宠物销售状态",
            "enum": [
              "available",
              "pending",
              "sold"
            ]
          }
        }
      }
    },
    "securitySchemes": {}
  },
  "servers": [
    {
      "url": "http://127.0.0.1:55200/v1",
      "description": "开发环境"
    }
  ]
}